basePath: /v1
definitions:
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  httputil.Response:
    properties:
      code:
        type: integer
      data: {}
      status:
        type: string
    type: object
  httputil.RestError:
    properties:
      code:
        type: integer
      error: {}
      status:
        type: string
    type: object
  user.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
info:
  contact: {}
  description: This is an api Swagger.
  title: Swagger Docs (RESTAPI BoilerPlate)
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login Payload
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            accessToken:
              description: Access token automatically set up to user cookie header
              type: string
            refreshToken:
              description: Refresh token automatically set up to user cookie header
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/httputil.Response'
            - properties:
                data:
                  properties:
                    access_token:
                      type: string
                    refresh_token:
                      type: string
                  type: object
              type: object
        default:
          description: 400 & 500 status, error field can be string or object
          schema:
            $ref: '#/definitions/httputil.RestError'
      summary: Login
      tags:
      - Auth
  /auth/logout:
    delete:
      description: Logout current user
      parameters:
      - description: accessToken cookie header
        in: header
        name: accessToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.Response'
        default:
          description: 400 & 500 status, error field can be string or object
          schema:
            $ref: '#/definitions/httputil.RestError'
      security:
      - JWT Cookies Auth: []
      summary: Logout
      tags:
      - Auth
  /auth/me:
    get:
      description: Identify user login state
      parameters:
      - description: accessToken cookie header
        in: header
        name: accessToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/httputil.Response'
            - properties:
                data:
                  properties:
                    id:
                      type: string
                    username:
                      type: string
                  type: object
              type: object
        default:
          description: 400 & 500 status, error field can be string or object
          schema:
            $ref: '#/definitions/httputil.RestError'
      security:
      - JWT Cookies Auth: []
      summary: Me
      tags:
      - Auth
  /auth/refresh:
    get:
      description: Refresh new access token
      parameters:
      - description: refreshToken cookie header
        in: header
        name: refreshToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            accessToken:
              description: New Access token automatically set up to user cookie
              type: string
          schema:
            allOf:
            - $ref: '#/definitions/httputil.Response'
            - properties:
                data:
                  properties:
                    access_token:
                      type: string
                  type: object
              type: object
        default:
          description: 400 & 500 status, error field can be string or object
          schema:
            $ref: '#/definitions/httputil.RestError'
      security:
      - JWT Cookies Auth: []
      summary: Refresh Token
      tags:
      - Auth
  /users:
    get:
      description: Returning list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/httputil.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/user.User'
                  type: array
              type: object
        default:
          description: 400 & 500 status, error field can be string or object
          schema:
            $ref: '#/definitions/httputil.RestError'
      summary: List Users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create New User
      parameters:
      - description: please exclude non-required fields before firing the request
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/httputil.Response'
        default:
          description: 400 & 500 status, error field can be string or object
          schema:
            $ref: '#/definitions/httputil.RestError'
      summary: Create User
      tags:
      - Users
  /users/{userId}:
    get:
      description: Returning an user object with given id
      parameters:
      - description: user_id (ULID)
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/httputil.Response'
            - properties:
                data:
                  $ref: '#/definitions/user.User'
              type: object
        default:
          description: 400 & 500 status, error field can be string or object
          schema:
            $ref: '#/definitions/httputil.RestError'
      summary: User by id
      tags:
      - Users
swagger: "2.0"
